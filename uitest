local Library = {}
local Options = {}

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LinoriaLikeLib"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui

local Themes = {
    Dark = {
        Background = Color3.fromRGB(20, 20, 20),
        Accent = Color3.fromRGB(0, 162, 255),
        Text = Color3.fromRGB(255, 255, 255),
        Secondary = Color3.fromRGB(40, 40, 40),
        Stroke = Color3.fromRGB(0, 0, 0)
    }
}
local CurrentTheme = Themes.Dark

local function TweenObject(obj, props, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(obj, TweenInfo.new(duration or 0.2, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out), props)
    tween:Play()
    return tween
end

local function CreateLabel(parent, text, size)
    local label = Instance.new("TextLabel")
    label.Size = size or UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = CurrentTheme.Text
    label.TextSize = 14
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = parent
    return label
end

local function CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 30)
    button.BackgroundColor3 = CurrentTheme.Secondary
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = CurrentTheme.Text
    button.TextSize = 14
    button.Font = Enum.Font.SourceSans
    button.Parent = parent

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = button

    local stroke = Instance.new("UIStroke")
    stroke.Color = CurrentTheme.Stroke
    stroke.Thickness = 1
    stroke.Parent = button

    button.MouseButton1Click:Connect(function()
        TweenObject(button, {BackgroundColor3 = CurrentTheme.Accent}, 0.1):Play()
        wait(0.1)
        TweenObject(button, {BackgroundColor3 = CurrentTheme.Secondary}, 0.1):Play()
        if callback then callback() end
    end)

    button.MouseEnter:Connect(function()
        TweenObject(button, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}, 0.2)
    end)
    button.MouseLeave:Connect(function()
        TweenObject(button, {BackgroundColor3 = CurrentTheme.Secondary}, 0.2)
    end)

    return button
end

local function CreateToggle(parent, name, default, callback)
    local option = {Value = default or false}
    Options[name] = option

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 30)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = CreateLabel(frame, name)
    label.Size = UDim2.new(1, -40, 1, 0)

    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 30, 0, 15)
    toggle.Position = UDim2.new(1, -35, 0.5, -7.5)
    toggle.BackgroundColor3 = CurrentTheme.Secondary
    toggle.BorderSizePixel = 0
    toggle.Text = ""
    toggle.Parent = frame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 7.5)
    corner.Parent = toggle

    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 13, 0, 13)
    indicator.Position = UDim2.new(0, 1, 0, 1)
    indicator.BackgroundColor3 = CurrentTheme.Accent
    indicator.BorderSizePixel = 0
    indicator.Parent = toggle

    local iCorner = Instance.new("UICorner")
    iCorner.CornerRadius = UDim.new(0, 6.5)
    iCorner.Parent = indicator

    toggle.MouseButton1Click:Connect(function()
        option.Value = not option.Value
        TweenObject(indicator, {Position = UDim2.new(option.Value and 0.5 or 0, 1, 0, 1)}, 0.2)
        if callback then callback(option.Value) end
    end)

    if option.Value then
        indicator.Position = UDim2.new(0.5, 1, 0, 1)
    end

    return option
end

local function CreateSlider(parent, name, min, max, default, callback)
    local option = {Value = default or min}
    Options[name] = option

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 50)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = CreateLabel(frame, name)
    label.Size = UDim2.new(1, 0, 0, 20)

    local valueLabel = CreateLabel(frame, tostring(option.Value))
    valueLabel.Size = UDim2.new(1, 0, 0, 15)
    valueLabel.Position = UDim2.new(0, 0, 0, 20)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right

    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, 15)
    slider.Position = UDim2.new(0, 0, 1, 0)
    slider.BackgroundColor3 = CurrentTheme.Secondary
    slider.BorderSizePixel = 0
    slider.Parent = frame

    local sCorner = Instance.new("UICorner")
    sCorner.CornerRadius = UDim.new(0, 7.5)
    sCorner.Parent = slider

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((option.Value - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = CurrentTheme.Accent
    fill.BorderSizePixel = 0
    fill.Parent = slider

    local fCorner = Instance.new("UICorner")
    fCorner.CornerRadius = UDim.new(0, 7.5)
    fCorner.Parent = fill

    local dragging = false

    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mouseX = input.Position.X
            local sliderX = slider.AbsolutePosition.X
            local sliderSize = slider.AbsoluteSize.X
            local percent = math.clamp((mouseX - sliderX) / sliderSize, 0, 1)
            option.Value = math.floor(min + (max - min) * percent)
            fill.Size = UDim2.new(percent, 0, 1, 0)
            valueLabel.Text = tostring(option.Value)
            if callback then callback(option.Value) end
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return option
end

local function CreateDropdown(parent, name, optionsList, default, callback)
    local option = {Value = default or optionsList[1]}
    Options[name] = option

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 30)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = CreateLabel(frame, name .. ": " .. option.Value)
    label.Size = UDim2.new(1, -20, 1, 0)

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 20, 1, 0)
    button.Position = UDim2.new(1, -20, 0, 0)
    button.BackgroundColor3 = CurrentTheme.Secondary
    button.BorderSizePixel = 0
    button.Text = "â–¼"
    button.TextColor3 = CurrentTheme.Text
    button.Parent = frame

    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = UDim2.new(1, 0, 0, 0)
    dropdownFrame.Position = UDim2.new(0, 0, 1, 5)
    dropdownFrame.BackgroundColor3 = CurrentTheme.Secondary
    dropdownFrame.Visible = false
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = parent

    local dCorner = Instance.new("UICorner")
    dCorner.CornerRadius = UDim.new(0, 4)
    dCorner.Parent = dropdownFrame

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = dropdownFrame

    for _, opt in ipairs(optionsList) do
        local optButton = Instance.new("TextButton")
        optButton.Size = UDim2.new(1, 0, 0, 25)
        optButton.BackgroundTransparency = 1
        optButton.Text = opt
        optButton.TextColor3 = CurrentTheme.Text
        optButton.Parent = dropdownFrame

        optButton.MouseButton1Click:Connect(function()
            option.Value = opt
            label.Text = name .. ": " .. opt
            dropdownFrame.Visible = false
            if callback then callback(opt) end
        end)

        optButton.MouseEnter:Connect(function()
            TweenObject(optButton, {BackgroundColor3 = CurrentTheme.Accent}, 0.1)
        end)
        optButton.MouseLeave:Connect(function()
            TweenObject(optButton, {BackgroundColor3 = Color3.new(1,1,1,0)}, 0.1)
        end)
    end

    dropdownFrame.Size = UDim2.new(1, 0, 0, #optionsList * 25)

    button.MouseButton1Click:Connect(function()
        dropdownFrame.Visible = not dropdownFrame.Visible
    end)

    return option
end

local function CreateKeybind(parent, name, default, callback)
    local option = {Value = default or Enum.KeyCode.Unknown}
    Options[name] = option

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 0, 30)
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = CreateLabel(frame, name)
    label.Size = UDim2.new(1, -60, 1, 0)

    local keybind = Instance.new("TextButton")
    keybind.Size = UDim2.new(0, 50, 0, 25)
    keybind.Position = UDim2.new(1, -55, 0, 2.5)
    keybind.BackgroundColor3 = CurrentTheme.Secondary
    keybind.BorderSizePixel = 0
    keybind.Text = option.Value.Name or "None"
    keybind.TextColor3 = CurrentTheme.Text
    keybind.Parent = frame

    local kCorner = Instance.new("UICorner")
    kCorner.CornerRadius = UDim.new(0, 4)
    kCorner.Parent = keybind

    local binding = false

    keybind.MouseButton1Click:Connect(function()
        keybind.Text = "..."
        binding = true
    end)

    UserInputService.InputBegan:Connect(function(input)
        if binding and input.KeyCode ~= Enum.KeyCode.Unknown then
            option.Value = input.KeyCode
            keybind.Text = input.KeyCode.Name
            binding = false
            if callback then callback(input.KeyCode) end
        end
    end)

    return option
end

local Window = {}
Window.__index = Window

function Window.new(title)
    local self = setmetatable({}, Window)

    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = UDim2.new(0, 600, 0, 400)
    self.MainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    self.MainFrame.BackgroundColor3 = CurrentTheme.Background
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Parent = ScreenGui

    local mCorner = Instance.new("UICorner")
    mCorner.CornerRadius = UDim.new(0, 8)
    mCorner.Parent = self.MainFrame

    local mStroke = Instance.new("UIStroke")
    mStroke.Color = CurrentTheme.Stroke
    mStroke.Thickness = 1
    mStroke.Parent = self.MainFrame

    self.Title = CreateLabel(self.MainFrame, title)
    self.Title.Size = UDim2.new(1, 0, 0, 40)
    self.Title.BackgroundTransparency = 1
    self.Title.TextSize = 16
    self.Title.Font = Enum.Font.SourceSansBold

    self.Content = Instance.new("Frame")
    self.Content.Size = UDim2.new(1, 0, 1, -40)
    self.Content.Position = UDim2.new(0, 0, 0, 40)
    self.Content.BackgroundTransparency = 1
    self.Content.Parent = self.MainFrame

    self.Tabs = {}
    self.TabContent = Instance.new("Frame")
    self.TabContent.Size = UDim2.new(1, 0, 1, 0)
    self.TabContent.BackgroundTransparency = 1
    self.TabContent.Parent = self.Content

    self.SelectedTab = nil

    local dragging = false
    local dragStart = nil
    local startPos = nil

    self.MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return self
end

function Window:AddTab(name)
    local tab = {
        Name = name,
        Buttons = {},
        LeftGroupbox = nil,
        RightGroupbox = nil
    }

    tab.Content = Instance.new("Frame")
    tab.Content.Size = UDim2.new(1, 0, 1, 0)
    tab.Content.BackgroundTransparency = 1
    tab.Content.Visible = false
    tab.Content.Parent = self.TabContent

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 5)
    listLayout.Parent = tab.Content

    table.insert(self.Tabs, tab)

    if #self.Tabs == 1 then
        self.SelectedTab = tab
        tab.Content.Visible = true
    end

    return tab
end

function Window:AddLeftGroupbox(name)
    local groupbox = Instance.new("Frame")
    groupbox.Size = UDim2.new(0.48, -5, 1, 0)
    groupbox.Position = UDim2.new(0, 5, 0, 0)
    groupbox.BackgroundColor3 = CurrentTheme.Secondary
    groupbox.BorderSizePixel = 0
    groupbox.Parent = self.SelectedTab.Content

    local gCorner = Instance.new("UICorner")
    gCorner.CornerRadius = UDim.new(0, 4)
    gCorner.Parent = groupbox

    local gStroke = Instance.new("UIStroke")
    gStroke.Color = CurrentTheme.Stroke
    gStroke.Thickness = 1
    gStroke.Parent = groupbox

    local gLabel = CreateLabel(groupbox, name)
    gLabel.Size = UDim2.new(1, 0, 0, 30)
    gLabel.BackgroundTransparency = 1
    gLabel.TextSize = 14
    gLabel.Font = Enum.Font.SourceSansBold

    local gContent = Instance.new("Frame")
    gContent.Size = UDim2.new(1, 0, 1, -30)
    gContent.Position = UDim2.new(0, 0, 0, 30)
    gContent.BackgroundTransparency = 1
    gContent.Parent = groupbox

    local gList = Instance.new("UIListLayout")
    gList.SortOrder = Enum.SortOrder.LayoutOrder
    gList.Padding = UDim.new(0, 2)
    gList.Parent = gContent

    self.SelectedTab.LeftGroupbox = gContent

    return gContent
end

function Window:AddRightGroupbox(name)
    local groupbox = Instance.new("Frame")
    groupbox.Size = UDim2.new(0.48, -5, 1, 0)
    groupbox.Position = UDim2.new(0.52, 0, 0, 0)
    groupbox.BackgroundColor3 = CurrentTheme.Secondary
    groupbox.BorderSizePixel = 0
    groupbox.Parent = self.SelectedTab.Content

    local gCorner = Instance.new("UICorner")
    gCorner.CornerRadius = UDim.new(0, 4)
    gCorner.Parent = groupbox

    local gStroke = Instance.new("UIStroke")
    gStroke.Color = CurrentTheme.Stroke
    gStroke.Thickness = 1
    gStroke.Parent = groupbox

    local gLabel = CreateLabel(groupbox, name)
    gLabel.Size = UDim2.new(1, 0, 0, 30)
    gLabel.BackgroundTransparency = 1
    gLabel.TextSize = 14
    gLabel.Font = Enum.Font.SourceSansBold

    local gContent = Instance.new("Frame")
    gContent.Size = UDim2.new(1, 0, 1, -30)
    gContent.Position = UDim2.new(0, 0, 0, 30)
    gContent.BackgroundTransparency = 1
    gContent.Parent = groupbox

    local gList = Instance.new("UIListLayout")
    gList.SortOrder = Enum.SortOrder.LayoutOrder
    gList.Padding = UDim.new(0, 2)
    gList.Parent = gContent

    self.SelectedTab.RightGroupbox = gContent

    return gContent
end

local function AddToggleTo(parent, name, default, callback)
    return CreateToggle(parent, name, default, callback)
end

local function AddSliderTo(parent, name, min, max, default, callback)
    return CreateSlider(parent, name, min, max, default, callback)
end

local function AddDropdownTo(parent, name, optionsList, default, callback)
    return CreateDropdown(parent, name, optionsList, default, callback)
end

local function AddButtonTo(parent, text, callback)
    return CreateButton(parent, text, callback)
end

local function AddKeybindTo(parent, name, default, callback)
    return CreateKeybind(parent, name, default, callback)
end

getgenv().Library = Window
getgenv().Options = Options

return Window
